{"version":3,"sources":["pages/StartPage.jsx","components/CardItem.jsx","components/CardList.jsx","pages/ImageListPage.jsx","components/LayoutSimple.jsx","components/CardItemDetail.jsx","pages/ImageDetailPage.jsx","App.js","serviceWorker.js","index.js"],"names":["StartPage","CardItem","id","title","description","imageURL","useState","isLiked","setIsLiked","likes","setLikes","showDescription","setShowDescription","className","src","alt","onClick","to","CardList","imageList","setImageList","fetchImageList","fetch","then","res","json","result","console","log","useEffect","map","item","index","key","ImageListPage","LayoutSimple","children","CardItemDetail","ImageDetailPage","props","imageData","setImageData","imageId","match","params","fetchImage","App","path","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94ef053f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function StartPage() {\r\n  return (\r\n    <div>\r\n      <h1>VÃ¤lkommen till Fakestagram</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function CardItem({ id, title, description, imageURL }) {\r\n  let [isLiked, setIsLiked] = useState(false);\r\n  const [likes, setLikes] = useState(100);\r\n  let [showDescription, setShowDescription] = useState(false);\r\n\r\n  function handleClick() {\r\n    setIsLiked(true);\r\n    setLikes(likes + 1);\r\n  }\r\n\r\n  function renderDescription() {\r\n    if (showDescription) {\r\n      return <p className=\"card-text\">{description}</p>;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  function renderShowMore() {\r\n    if (showDescription === false) {\r\n      return <span onClick={() => setShowDescription(true)}>Read More</span>;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"col-xl-4 col-md-6 col-sm-12 mt-3\">\r\n      <div className=\"card\">\r\n        <img className=\"card-img-top\" src={imageURL} alt=\"Card cap\" />\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{title}</h5>\r\n          {/* <p className=\"card-text\">{description}</p> */}\r\n          {renderShowMore()}\r\n          {renderDescription()}\r\n\r\n          <button onClick={handleClick} className=\"btn btn-primary btn-block\">\r\n            {isLiked ? \"Du har gillat\" : \"Gilla\"}, Antal Likes: {likes}\r\n          </button>\r\n          <Link to={`/image/${id}`}>Go to image detail</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// let randomLikeValue = Math.floor(Math.random() * 1500);\r\n//\r\n\r\n// function handleClick() {\r\n//\r\n// }\r\n","import React from \"react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport CardItem from \"./CardItem\";\r\n\r\nexport default function CardList() {\r\n  let [imageList, setImageList] = useState([]);\r\n\r\n  function fetchImageList() {\r\n    fetch(\"https://image-mock-data.firebaseio.com/images.json\")\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        setImageList(result);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchImageList();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Card list</h2>\r\n      <button onClick={fetchImageList}>Images</button>\r\n      <div className=\"row\">\r\n        {imageList.map((item, index) => {\r\n          return (\r\n            <CardItem\r\n              key={index}\r\n              id={index}\r\n              title={item.title}\r\n              description={item.description}\r\n              imageURL={item.imageURL}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\n\r\nexport default function ImageListPage() {\r\n  return (\r\n    <div>\r\n      <CardList />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function LayoutSimple({ children }) {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Link className=\"btn btn-primary btn-block\" to=\"/\">\r\n          Home\r\n        </Link>\r\n        <Link className=\"btn btn-primary btn-block\" to=\"/image-list\">\r\n          Go to Image List\r\n        </Link>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function CardItemDetail({ title, description, imageURL }) {\r\n  return (\r\n    <div className=\"m-3\">\r\n      <div className=\"card\">\r\n        <img className=\"card-img-top\" src={imageURL} alt=\"Card cap\" />\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{title}</h5>\r\n          <p>{description}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport CardItemDetail from \"../components/CardItemDetail\";\r\n\r\nexport default function ImageDetailPage(props) {\r\n  let [imageData, setImageData] = useState({});\r\n\r\n  function fetchImage() {\r\n    const imageId = props.match.params.id;\r\n    fetch(`https://image-mock-data.firebaseio.com/images/${imageId}.json`)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setImageData(result);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchImage();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div>\r\n      <h1>Image Detail Page</h1>\r\n      <CardItemDetail\r\n        title={imageData.title}\r\n        description={imageData.description}\r\n        imageURL={imageData.imageURL}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport StartPage from \"./pages/StartPage\";\nimport ImageListPage from \"./pages/ImageListPage\";\nimport { Route, Switch } from \"react-router-dom\";\nimport LayoutSimple from \"./components/LayoutSimple\";\nimport ImageDetailPage from \"./pages/ImageDetailPage\";\n\nfunction App() {\n  return (\n    <div className=\"App \">\n      <Switch>\n        <Route\n          path=\"/image/:id\"\n          render={(props) => {\n            return (\n              <LayoutSimple>\n                <ImageDetailPage {...props} />\n              </LayoutSimple>\n            );\n          }}\n        ></Route>\n\n        <Route path=\"/image-list\">\n          <LayoutSimple>\n            <ImageListPage />\n          </LayoutSimple>\n        </Route>\n        <Route path=\"/\">\n          <LayoutSimple>\n            <StartPage />\n          </LayoutSimple>\n        </Route>\n      </Switch>\n      {/* <ImageListPage /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}